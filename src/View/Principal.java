/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author pedro
 */
public class Principal extends javax.swing.JFrame {

    private File imageFile;
    private BufferedImage img;
    private BufferedImage transformed;
    private ArrayList<int []> originalHistogram;
    private ArrayList<int []> transformedHistogram;
    
    private int[] originalHistogram1;
    private int[] transformedHistogram1;
    
    private int imageWidth;
    private int imageHeight;
    
    public int[] specifiedHistogram;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuTransformacoes = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        menuHistograma = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(new java.awt.GridLayout(2, 2, 20, 20));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Imagem original aqui");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel3, java.awt.BorderLayout.CENTER);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Imagem transformada aqui");
        jPanel2.add(jLabel5, java.awt.BorderLayout.CENTER);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel2.add(jLabel6, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Histograma da imagem original aqui");
        jPanel3.add(jLabel7, java.awt.BorderLayout.CENTER);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel3.add(jLabel8, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Histograma da imagem transformada aqui");
        jPanel4.add(jLabel9, java.awt.BorderLayout.CENTER);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel4.add(jLabel10, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel4);

        menuArquivo.setText("Arquivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArquivo.add(jMenuItem1);

        jMenuItem3.setText("Salvar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menuArquivo.add(jMenuItem3);

        jMenuBar1.add(menuArquivo);

        menuTransformacoes.setText("Transformações");

        jMenuItem2.setText("Logarítmica");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuTransformacoes.add(jMenuItem2);

        jMenuItem4.setText("Gama");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        menuTransformacoes.add(jMenuItem4);

        jMenuItem5.setText("Inversa");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        menuTransformacoes.add(jMenuItem5);

        jMenuBar1.add(menuTransformacoes);

        menuHistograma.setText("Histograma");

        jMenuItem6.setText("Equalizar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        menuHistograma.add(jMenuItem6);

        jMenuItem7.setText("Especificar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        menuHistograma.add(jMenuItem7);

        jMenuBar1.add(menuHistograma);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            
            //Recebe o arquivo escolhido pelo usuário através do JFileChooser
            imageFile = chooser.getSelectedFile();
            
            img = null;
            try {
                img = ImageIO.read(imageFile);
                
                this.imageHeight = img.getHeight();
                this.imageWidth = img.getWidth();
                
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            Image dimg = img.getScaledInstance(jLabel3.getWidth(), jLabel3.getHeight(),
                 Image.SCALE_SMOOTH);

            ImageIcon imageIcon = new ImageIcon(dimg);

            jLabel3.setIcon(imageIcon);
            jLabel3.setText("");
            
            jLabel4.setText("Imagem original");
            
            //Gera o Histograma da imagem Original
            try {
                createOriginalHistogram();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        transformacaoLogaritmica();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        transformacaoInversa();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        transformacaoGama();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        transformacaoEqualizacao();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        //Open Canvas Screen here
        
        //EQUALIZACAO
        
        this.specifiedHistogram = new int[0];
        
        DrawFrame drawFrame = new DrawFrame();
        drawFrame.setVisible(true);
        drawFrame.principal = this;
        drawFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        /*Some piece of code*/
        drawFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                System.out.println("Size = "+specifiedHistogram.length);
                
                transformacaoEspecificacao();
                
            }
        });
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        
        JFileChooser chooser = new JFileChooser();
        // Demonstrate "Save" dialog:
        int rVal = chooser.showSaveDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            
            String fileName = chooser.getSelectedFile().getName();
            String directory = chooser.getCurrentDirectory().toString();
            
            System.out.println("Filename :"+fileName);
            System.out.println("Directory :"+directory);
            
            File image = new File(directory+"/"+fileName);
            
            try {
                ImageIO.write(this.transformed, "jpg", image);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void transformacaoEspecificacao(){
        
        BufferedImage bufferedImage = new BufferedImage(imageWidth, imageHeight,BufferedImage.TYPE_INT_RGB);
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
                
                //int intensity1 = (alpha + red + green + blue)/4;
                int intensity = (red + green + blue)/3;
                
                //Transformação Inversa propriamente dita
                int nAlpha = (int) (this.specifiedHistogram[intensity]>>24) & 0xff;
                int nRed = (int)   (this.specifiedHistogram[intensity]>>16) & 0xff;
                int nGreen = (int) (this.specifiedHistogram[intensity]>>8) & 0xff;
                int nBlue = (int)  this.specifiedHistogram[intensity] & 0xff;
                
                //System.out.println("Alpha, Red, Green, Blue = "+nAlpha+","+nRed+","+nGreen+","+nBlue);
                
                int newColor = createColor(nAlpha, nRed, nGreen, nBlue);
                
                bufferedImage.setRGB(x, y, newColor);
            }
        }
        
        setTransformedImage(bufferedImage);
         try {
            createTransformedHistogram();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel10.setText("Imagem transformada por Equalização");
        
    }
    
    private void transformacaoLogaritmica(){
        
        double constante = 0;
        
        //constante = Double.parseDouble(JOptionPane.showInputDialog("Insira a Constante"));
        constante = 255/(Math.log10(1 + obterMaiorValorPixel()));

        transformed = new BufferedImage(imageWidth, imageHeight,BufferedImage.TYPE_INT_RGB);
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                //Obter o valor RGB do pixel
                int p = img.getRGB(x,y);
                
                //Obter os valores das cores e de Alpha
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
                
                //Transformação Logarítmica propriamente dita
                int nAlpha = (int) (constante * Math.log10(1 + alpha));
                int nRed = (int) (constante * Math.log10(1 + red));
                int nGreen = (int) (constante * Math.log10(1 + green));
                int nBlue = (int) (constante * Math.log10(1 + blue));
                
                int newColor = createColor(nAlpha, nRed, nGreen, nBlue);
                
                transformed.setRGB(x, y, newColor);
            }
        }
        
        setTransformedImage(transformed);
        try {
            createTransformedHistogram();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel10.setText("Imagem transformada por Logarítmica");
    }
    
    private void transformacaoGama(){

        double constante = 255/(Math.log10(1 + obterMaiorValorPixel()));
        double gama = Double.parseDouble(JOptionPane.showInputDialog("Insira gama:"));
        
        BufferedImage bufferedImage = new BufferedImage(imageWidth, imageHeight,BufferedImage.TYPE_INT_RGB);
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
                
                //Transformação Inversa propriamente dita
                int nAlpha = (int) (constante * Math.pow(alpha, gama));
                int nRed = (int) (constante * Math.pow(red, gama));
                int nGreen = (int) (constante * Math.pow(green, gama));
                int nBlue = (int) (constante * Math.pow(blue, gama));
                
                int newColor = createColor(nAlpha, nRed, nGreen, nBlue);
                
                bufferedImage.setRGB(x, y, newColor);
            }
        }
        
        setTransformedImage(bufferedImage);
        //Gerar histograma
         try {
            createTransformedHistogram();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel10.setText("Imagem transformada por Gama");

    }
    
    private void transformacaoInversa(){

        BufferedImage bufferedImage = new BufferedImage(imageWidth, imageHeight,BufferedImage.TYPE_INT_RGB);
        double maiorValor = obterMaiorValorPixel();
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
                
                //Transformação Inversa propriamente dita
                int nAlpha = (int) (maiorValor - 1 - alpha);
                int nRed = (int) (maiorValor - 1 - red);
                int nGreen = (int) (maiorValor - 1 - green);
                int nBlue = (int) (maiorValor - 1 - blue);
                
                int newColor = createColor(nAlpha, nRed, nGreen, nBlue);
                
                bufferedImage.setRGB(x, y, newColor);
            }
        }
        
        setTransformedImage(bufferedImage);
         try {
            createTransformedHistogram();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel10.setText("Imagem transformada por Inversa");
        
    }
    
    private void transformacaoEqualizacao(){

        int pixelCountTotal = imageWidth * imageHeight;
        System.out.println("Pixel Count = "+pixelCountTotal);
        
        double maxIntensity = obterMaiorValorPixel();
        System.out.println("Max Intensity = "+maxIntensity);
        
        BufferedImage bufferedImage = new BufferedImage(imageWidth, imageHeight,BufferedImage.TYPE_INT_RGB);
        
        //Vetor das probabilidade de cada intensidade de pixel
        float[] probabilities = new float[256];
        for(int i = 0; i < this.originalHistogram1.length; i++){
            probabilities[i] = (float)originalHistogram1[i]/pixelCountTotal;
            System.out.println("Probabilites = "+probabilities[i]);
        }

        //Vetor das probabilidades cumulativas de cada intensidade de pixel
        float[] cumulativies = new float[256];
        float cumulativeAnterior = 0;
        
        for(int i = 0; i < this.originalHistogram1.length; i++){
            cumulativies[i] = (float)probabilities[i] + cumulativeAnterior;
            cumulativeAnterior = cumulativies[i]; 
            System.out.println("Cumulative = "+cumulativies[i]);
        }
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
                
                //int intensity1 = (alpha + red + green + blue)/4;
                int intensity = (red + green + blue)/3;
                
                //System.out.println((p & 0xFF)+" e "+intensity);
                
                int pixelCount = this.originalHistogram1[intensity];
                //System.out.println("Pixel Count of "+intensity+" = "+pixelCount);
                
                //Transformação Inversa propriamente dita
                int nAlpha = (int) (cumulativies[intensity] * 255);
                int nRed = (int)   (cumulativies[intensity] * 255);
                int nGreen = (int) (cumulativies[intensity] * 255);
                int nBlue = (int)  (cumulativies[intensity] * 255);
                
                //System.out.println("Alpha, Red, Green, Blue = "+nAlpha+","+nRed+","+nGreen+","+nBlue);
                
                int newColor = createColor(nAlpha, nRed, nGreen, nBlue);
                
                bufferedImage.setRGB(x, y, newColor);
            }
        }
        
        setTransformedImage(bufferedImage);
         try {
            createTransformedHistogram();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel10.setText("Imagem transformada por Equalização");
        
    }
    
    private double obterMaiorValorPixel(){
        double maior = 0;
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
                
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
               
                double grayScale = (red + green + blue)/3;
                
                if(grayScale > maior){
                    maior = grayScale;
                }
            }
        }
        
        return maior;
    }
    
    private void createCountListOriginal(){
        
        //Cria o vetor
        originalHistogram1 = new int[256];
        
        //Inicializa o vetor
        for(int i = 0; i < 256; i++){
            originalHistogram1[i] = 0;
        }
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
         
                int p = img.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
               
                int intensity = (red + green + blue)/3;
            
                originalHistogram1[intensity] = originalHistogram1[intensity] + 1; 
            }
        }
        
    }
    
    private void createCountListTransformed(){
        
        //Cria o vetor
        transformedHistogram1 = new int[256];
        
        //Inicializa o array
        for(int i = 0; i < 256; i++){
            transformedHistogram1[i] = 0;
        }
        
        for(int x = 0; x < imageWidth; x++){
            for(int y = 0; y < imageHeight; y++){
         
                int p = transformed.getRGB(x,y);
                
                int alpha = (p>>24) & 0xff;
                int red = (p>>16) & 0xff;
                int green = (p>>8) & 0xff;
                int blue = p & 0xff;
               
                int intensity = (red + green + blue)/3;
            
                transformedHistogram1[intensity] = transformedHistogram1[intensity] + 1; 
            }
        }
        
    }
    
    private void createOriginalHistogram() throws IOException{
        
        createCountListOriginal();
        
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset( );
        
        for(int i = 0; i < originalHistogram1.length; i++){
            dataset.addValue(originalHistogram1[i], "", Integer.toString(i));
        }
        
        JFreeChart barChart = ChartFactory.createBarChart("", 
         "Cor", "Quantidade", dataset,PlotOrientation.VERTICAL, true, true, false);
        
        int width = 640;    /* Width of the image */
        int height = 480;   /* Height of the image */ 
        File BarChart = new File( "BarChart.jpeg" ); 
        ChartUtilities.saveChartAsJPEG( BarChart , barChart , width , height );
        
        BufferedImage img1;
        
        img1 = ImageIO.read(BarChart);
        
        Image dimg = img1.getScaledInstance(jLabel7.getWidth(), jLabel7.getHeight(),
                 Image.SCALE_SMOOTH);

        ImageIcon imageIcon = new ImageIcon(dimg);
        jLabel7.setIcon(imageIcon);
        jLabel7.setText("");
        
        jLabel8.setText("Histograma da imagem original");
        
    }
    
    private void createTransformedHistogram() throws IOException{
        
        createCountListTransformed();
        
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset( );
        
        for(int i = 0; i < transformedHistogram1.length; i++){
            dataset.addValue(transformedHistogram1[i], "", Integer.toString(i));
        }
        
        JFreeChart barChart = ChartFactory.createBarChart("", 
         "Cor", "Quantidade", dataset,PlotOrientation.VERTICAL, true, true, false);
        
        int width = 640;    /* Width of the image */
        int height = 480;   /* Height of the image */ 
        File BarChart = new File( "BarChart.jpeg" ); 
        ChartUtilities.saveChartAsJPEG( BarChart , barChart , width , height );
        
        BufferedImage img1;
        
        img1 = ImageIO.read(BarChart);
        
        Image dimg = img1.getScaledInstance(jLabel9.getWidth(), jLabel9.getHeight(),
                 Image.SCALE_SMOOTH);

        ImageIcon imageIcon = new ImageIcon(dimg);
        jLabel9.setIcon(imageIcon);
        jLabel9.setText("");
        
        jLabel10.setText("Histograma da imagem transformada");
    }
    
    private int createColor(int alpha, int red, int green, int blue){
        int color = 0;
        
         color = color | blue;
         color = color | (green <<8);
         color = color | (red <<16);
         color = color | (alpha <<24);
        
        return color;
    }
    
    private void setTransformedImage(BufferedImage img){
        
        this.transformed = img;
        
        Image dimg = img.getScaledInstance(jLabel5.getWidth(), jLabel5.getHeight(),
                 Image.SCALE_SMOOTH);

        ImageIcon imageIcon = new ImageIcon(dimg);

        jLabel5.setIcon(imageIcon);
        jLabel5.setText("");
       
        jLabel6.setText("Imagem transformada");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuHistograma;
    private javax.swing.JMenu menuTransformacoes;
    // End of variables declaration//GEN-END:variables
}
